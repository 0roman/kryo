<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.esotericsoftware</groupId>
		<artifactId>kryo-modules</artifactId>
		<version>5.0.0-SNAPSHOT</version>
		<relativePath>./pom-modules.xml</relativePath>
	</parent>

	<artifactId>kryo</artifactId>
	<packaging>bundle</packaging>

	<name>Kryo</name>
	<description>Fast, efficient Java serialization. This is the main Kryo artifact.</description>

	<dependencies>
		<dependency>
			<groupId>com.esotericsoftware</groupId>
			<artifactId>reflectasm</artifactId>
			<version>1.11.6</version>
		</dependency>
		<dependency>
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>com.esotericsoftware</groupId>
			<artifactId>minlog</artifactId>
			<version>1.3.0</version>
		</dependency>

		<!-- Tests. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.4.0</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Import-Package><![CDATA[
						COM.jrockit*;resolution:=optional,
						COM.newmonics*;resolution:=optional,
						jrockit*;resolution:=optional,
						sun.reflect;resolution:=optional,
						sun.misc;resolution:=optional,
						sun.nio.ch;resolution:=optional,
						*
						]]>
						</Import-Package>
						<Export-Package>com.esotericsoftware.kryo.*</Export-Package>
					</instructions>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<descriptor>etc/assembly-all.xml</descriptor>
				</configuration>
				<!--
					According to http://stackoverflow.com/questions/2244344/deploying-assembly-package-with-maven-release-plugin
					this should add the assembly zip to the files uploaded during release:perform/deploy.
				-->
				<executions>
					<execution>
						<id>dist-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.4.0</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Import-Package><![CDATA[
						COM.jrockit*;resolution:=optional,
						COM.newmonics*;resolution:=optional,
						jrockit*;resolution:=optional,
						sun.reflect;resolution:=optional,
						sun.misc;resolution:=optional,
						sun.nio.ch;resolution:=optional,
						*
						]]></Import-Package>
						<Export-Package>com.esotericsoftware.kryo.*</Export-Package>
					</instructions>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<descriptor>etc/assembly-all.xml</descriptor>
				</configuration>
				<!--
					According to http://stackoverflow.com/questions/2244344/deploying-assembly-package-with-maven-release-plugin
					this should add the assembly zip to the files uploaded during release:perform/deploy.
				-->
				<executions>
					<execution>
						<id>dist-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>clirr-maven-plugin</artifactId>
				<version>2.8</version>
				<executions>
					<!-- Automatically run clirr:check on compile -->
					<execution>
						<id>check-on-compile</id>
						<phase>compile</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<!-- See http://mojo.codehaus.org/clirr-maven-plugin/check-mojo.html -->
				<configuration>
					<skip>true</skip>
					<logResults>true</logResults>
					<minSeverity>warning</minSeverity>
					<excludes>
						<!-- Internal APIs -->
						<exclude>com/esotericsoftware/kryo/util/GenericsUtil</exclude>
						<exclude>com/esotericsoftware/kryo/util/IdentityMap</exclude>
						<exclude>com/esotericsoftware/kryo/util/IdentityObjectIntMap</exclude>
						<exclude>com/esotericsoftware/kryo/util/IntArray</exclude>
						<exclude>com/esotericsoftware/kryo/util/IntMap</exclude>
						<exclude>com/esotericsoftware/kryo/util/ObjectMap</exclude>
						<exclude>com/esotericsoftware/kryo/unsafe/UnsafeUtil</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<!-- Generate compatibility report with: mvn clirr:clirr -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>clirr-maven-plugin</artifactId>
				<version>2.8</version>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<profile>
			<id>requireSnapshot</id>
			<!-- This profile is activated by the "-P requireSnapshot" switch to
				be able to deploy SNAPSHOTs only (which is not allowed for releases) -->
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-enforcer-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<evaluateBeanshell>
											<condition>"${project.version}".endsWith("-SNAPSHOT")</condition>
											<message>Only build -SNAPSHOT versions.</message>
										</evaluateBeanshell>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>until-java8</id>
			<activation>
				<!-- Use exclusive 1.8 range instead of inclusive 1.7, because an upper bound ",1.7]" is likely not to include most releases of 1.7,
				   since they will have an additional "patch" release such as _05 that is not taken into consideration in the above range.
				   See also: http://maven.apache.org/guides/introduction/introduction-to-profiles.html#Details_on_profile_activation -->
				<jdk>[1.5,1.8)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.19</version>
						<configuration>
							<excludes>
								<exclude>**/Java8*Test.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>java8</id>
			<!-- To disable this profile run mvn with '-P !java8' (maybe escape the exclamation mark). -->
			<activation><jdk>[1.8,)</jdk></activation>
			<!-- Use properties to change compiler configuration because overriding build/plugin config just did not work. -->
			<properties>
				<!-- Setting an empty values does not override/set the property. -->
				<test.exclude>someValueWhichDoesNotExist</test.exclude>
				<maven.compiler.testSource>1.8</maven.compiler.testSource>
				<maven.compiler.testTarget>1.8</maven.compiler.testTarget>
			</properties>
		</profile>
	</profiles>
</project>
